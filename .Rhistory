library(readxl)
library(readr)
library(dplyr)
library(lubridate)
library(tidyr)
library(zoo)
start_date <- as.Date("2010-01-01")
end_date   <- as.Date("2025-03-31")
read_monthly <- function(path, value_name) {
read_excel(path, col_types = c("date", "numeric")) |>
rename(!!value_name := 2) |>
filter(Date >= start_date, Date <= end_date)
}
m2    <- read_monthly("data/armenia_M2.xlsx",                   "M2")
bot   <- read_monthly("data/armenia_balance_of_trade.xlsx",     "balance_of_trade")
infl  <- read_monthly("data/armenia_long_run_inflation_rate.xlsx",  "inflation_rate")
refi  <- read_monthly("data/armenia_short_term_interest_rate.xlsx","refinancing_rate")
unemp <- read_monthly("data/armenia_unemployment_rate.xlsx",    "unemployment_rate")
gdp <- read_excel("data/armenia_GDP.xlsx",
col_types = c("date","numeric","numeric","numeric")) |>
rename(
GDP         = 2,   # nominal USD bn
Growth_Rate = 3,   # quarterly %
CPI         = 4    # index (100 = base)
) |>
filter(Date >= start_date, Date <= end_date)
fx_monthly <- read_csv("data/usd_exchange_rate.csv",
col_types = cols(
Date = col_date(format = "%d/%m/%Y"),
USD  = col_double()
)) |>
mutate(Date = floor_date(Date, "month")) |>
group_by(Date) |>
summarise(USD = last(USD), .groups = "drop") |>
filter(Date >= start_date, Date <= end_date)
arm_df <- fx_monthly |>
left_join(m2,    by = "Date") |>
left_join(bot,   by = "Date") |>
left_join(infl,  by = "Date") |>
left_join(refi,  by = "Date") |>
left_join(unemp, by = "Date") |>
left_join(gdp,   by = "Date") |>
arrange(Date) |>
mutate(
GDP = case_when(
!is.na(Growth_Rate) ~ lag(GDP, 12) * (1 + Growth_Rate/100),
TRUE                ~ GDP
)
) |>
mutate(
GDP = na.approx(GDP, x = Date, rule = 2),
CPI = na.approx(CPI, x = Date, rule = 2)
) |>
mutate(real_GDP = GDP / (CPI / 100)) |>
fill(unemployment_rate, .direction = "up") |>
mutate(M2_usd_bil = (M2 * 1e3) / USD) |>
select(
Date,
USD,
M2_usd_bil,
real_GDP,
everything()
)
arm_df
save(arm_df, file = "arm_df.RData")
library(fredr)
library(dplyr)
library(lubridate)
library(tidyr)
library(zoo)
# Set API key for FRED
fredr_set_key("63607c8313d2159651503dcdac13f245")
# Define date range
start_date <- as.Date("2010-01-01")
end_date   <- as.Date("2025-03-01")
# Helper to fetch & truncate monthly series
get_fred_monthly <- function(id) {
fredr(series_id = id, observation_start = start_date) |>
select(Date = date, value) |>
mutate(Date = floor_date(Date, "month")) |>
group_by(Date) |>
summarise(value = last(value), .groups = "drop") |>
filter(Date >= start_date, Date <= end_date)
}
# Fetch series
m2_us   <- get_fred_monthly("M2SL")     |> rename(M2_us = value)
rate_us <- get_fred_monthly("FEDFUNDS") |> rename(rate_us = value)
infl_us <- get_fred_monthly("T10YIE")   |> rename(pi_exp_us = value)
tb_us   <- get_fred_monthly("BOPGSTB")  |> rename(trade_balance_us = value)
# Quarterly real GDP → monthly with interpolation + forward‐fill
gdp_q <- fredr(series_id = "GDPC1", observation_start = start_date) |>
select(Date = date, real_GDP_us = value) |>
filter(Date >= start_date, Date <= end_date)
gdp_us <- gdp_q |>
complete(Date = seq.Date(min(Date), max(Date), by = "month")) |>
arrange(Date) |>
mutate(
real_GDP_us = na.approx(real_GDP_us, x = Date, rule = 2)
) |>
fill(real_GDP_us, .direction = "down") |>
filter(Date >= start_date, Date <= end_date)
# Combine all into one data frame
us_df <- m2_us |>
left_join(rate_us, by = "Date") |>
left_join(infl_us, by = "Date") |>
left_join(tb_us,   by = "Date") |>
left_join(gdp_us,  by = "Date") |>
arrange(Date) |>
fill(pi_exp_us, real_GDP_us, .direction = "down")
# Save and inspect
save(us_df, file = "us_df.RData")
tail(us_df)
# 03_merge_model_prep.R -----------------------------------------------------
assign("arm_df", arm_df, envir = .GlobalEnv)   # 01_armenia_data.R
assign("us_df",  us_df,  envir = .GlobalEnv)   # 02_us_data.R
library(dplyr)
model_df <- arm_df |>
left_join(us_df, by = "Date") |>
mutate(
USD = log(USD),
## log‑differentials -----------------------------------------------------
m_diff = log(M2_us) - log(M2_usd_bil),
y_diff  = log(real_GDP_us) - log(real_GDP),
rs_diff = rate_us - refinancing_rate,
pi_diff = pi_exp_us - inflation_rate,
TB_cum_arm = cumsum(balance_of_trade),
TB_cum_us  = cumsum(trade_balance_us)
) |>
select(Date, USD, m_diff, y_diff, rs_diff, pi_diff,
TB_cum_arm, TB_cum_us, everything())
print(head(model_df, 12))
# 06_model_subset_vif.R ------------------------------------------------------
library(dplyr)
library(tidyr)    # ← for drop_na()
library(car)
# 0. DATA PREP & SPLIT
model_df <- model_df %>%
filter(if_any(everything(), ~ !is.na(.))) %>%
arrange(Date)
n         <- nrow(model_df)
split_pt  <- floor(0.7 * n)
train_set <- model_df[1:split_pt, ]
test_set  <- model_df[(split_pt + 1):n, ]
# 1. P-VALUE SCREENING
full_fit <- lm(USD ~ m_diff + y_diff + rs_diff + pi_diff + TB_cum_arm + TB_cum_us,
data = train_set)
pvals    <- summary(full_fit)$coefficients[-1, 4]
sig_vars <- names(pvals)[pvals < 0.05]
# 2. VIF PRUNING
subset_vars <- sig_vars
repeat {
fm    <- lm(reformulate(subset_vars, "USD"), data = train_set)
vif_v <- vif(fm)
if (max(vif_v) <= 5) break
subset_vars <- setdiff(subset_vars, names(which.max(vif_v)))
}
# 3. FIT & SUMMARY
fit_sub <- lm(reformulate(subset_vars, "USD"), data = train_set)
cat("=== Summary: Subset + VIF ===\n")
print(summary(fit_sub))
# 4. PREDICTIONS
pred_train <- fitted(fit_sub)
pred_test  <- predict(fit_sub, newdata = test_set)
# 5. METRICS
metrics <- function(actual, pred, p) {
n    <- length(actual)
mse  <- mean((actual - pred)^2)
rmse <- sqrt(mse)
mae  <- mean(abs(actual - pred))
r2   <- cor(actual, pred)^2
adjr2 <- 1 - (1 - r2)*(n - 1)/(n - p - 1)
da   <- mean(sign(diff(actual)) == sign(diff(pred)))
list(MSE = mse, RMSE = rmse, MAE = mae, R2 = r2, AdjR2 = adjr2, DirAcc = da)
}
p_sub   <- length(coef(fit_sub)) - 1
m_train <- metrics(train_set$USD, pred_train, p_sub)
m_test  <- metrics(test_set$USD,  pred_test,  p_sub)
cat("\n=== Metrics: Subset + VIF ===\n")
cat("Selected vars:", paste(subset_vars, collapse = ", "), "\n")
cat("Train: ", sprintf(
"MSE=%.4f  RMSE=%.4f  MAE=%.4f  R2=%.4f  AdjR2=%.4f  DirAcc=%.4f\n",
m_train$MSE, m_train$RMSE, m_train$MAE, m_train$R2, m_train$AdjR2, m_train$DirAcc
))
cat("Test:  ", sprintf(
"MSE=%.4f  RMSE=%.4f  MAE=%.4f  R2=%.4f  AdjR2=%.4f  DirAcc=%.4f\n",
m_test$MSE, m_test$RMSE, m_test$MAE, m_test$R2, m_test$AdjR2, m_test$DirAcc
))
